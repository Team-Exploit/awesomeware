import os
import sys
import argparse

from FileEncryptMac import my_encrypt
from FileDecryptMac import my_decrypt

def get_files_in_dir(path: str) -> set:
    files = set()
    raw_dir = os.listdir(path)
    for item in raw_dir:
        _, ext = os.path.splitext(os.path.basename(path))
        if ext not in ('.py', '.pem'):
            full_path = os.path.join(path, item)
            if os.path.isfile(full_path):
                files.add(full_path)
    return files

def get_jsons_in_dir(path: str) -> set:
    files = get_files_in_dir(path)
    json_files = set()
    for a_file in files:
        _, ext = os.path.splitext(os.path.basename(a_file))
        if ext == '.json':
            json_files.add(a_file)
    return json_files

def main():
    parser = argparse.ArgumentParser(
        prog="encrypt.py",
        description="Peform encryption/decryption operations")
    ## args.input
    # group = parser.add_mutually_exclusive_group(required=True)
    # group.add_argument('-f', '--file', action='store_true')
    # group.add_argument('-F', '--folder', action='store_true')
    parser.add_argument(
        'input',
        type=str,
        help='Input file')
    ## args.decrypt
    parser.add_argument(
        '-d', '--decrypt',
        action='store_true',
        help="Set the program in decryption mode")
    # ## args.output
    # parser.add_argument(
    #     '-o', '--out', '--output',
    #     type=str,
    #     action='store',
    #     metavar="output_file",
    #     default="output",
    #     dest="output",
    #     help="Spectify the name of the output file")
    # ## args.json
    # parser.add_argument(
    #     '-j', '--json',
    #     type=str,
    #     action='store',
    #     metavar="json_file",
    #     default="data.json",
    #     help="Specify the json file to read/write encryption data")
    ## args.folder
    parser.add_argument(
        '-F', '--folder',
        action='store_true',
        help="Specify that the target is a folder")
    args = parser.parse_args(sys.argv[1:])
    if args.decrypt:
        if args.folder:
            jsons = get_jsons_in_dir(args.input)
            for a_json in jsons:
                my_decrypt(a_json)
                os.remove(a_json)
        else:
            my_decrypt(args.input)
    else:
        if args.folder:
            files = get_files_in_dir(args.input)
            for a_file in files:
                my_encrypt(a_file)
                os.remove(a_file)
        else:
            my_encrypt(args.input)

if __name__ == "__main__":
    main()
